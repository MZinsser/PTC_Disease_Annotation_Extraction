

# This script gives the number of nodes and the number of relationships that 
#should be expected in the neo4j db after its initial upload.

import csv
import pandas as pd
from pandas import DataFrame

batch1 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch1.csv')
batch2 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch2.csv')
batch3 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch3.csv')
batch4 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch4.csv')
batch5 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch5.csv')
batch6 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch6.csv')
batch7 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch7.csv')
batch8 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch8.csv')
batch9 = pd.read_csv('/Users/marleezinsser/Library/Application Support/Neo4j Desktop/Application/neo4jDatabases/database-9561e750-6489-490b-a464-8401345607cf/installation-3.5.6/import/batch9.csv')
frames = [batch1, batch2, batch3, batch4, batch5, batch6, batch7, batch8, batch9]
df = pd.concat(frames)

#df1 = pd.read_csv('/Users/marleezinsser/Desktop/agg_df.csv')
#df2 = pd.read_csv('/Users/marleezinsser/Desktop/batch1.csv')

num_PMID_nodes = df['PMID'].nunique()
num_MESH_nodes = df['MESH'].nunique()
num_Disease_nodes = df['Disease'].nunique()

sum_dup_MESH = df.iloc[:,[1,2,4]]
dfx = sum_dup_MESH.drop_duplicates()

PTC_nodes = num_PMID_nodes + num_MESH_nodes + num_Disease_nodes



#num null MESHIDs:
#num_null = df.isnull().sum()

#Each row represents 2 possible relationships, and need to subtract 1 relationship
#for each "duplicate" MESH relationship (connector duplicated but property of times_annotated
# is unique, so want the two connections in there for now!)

#What neo4j seems to be doing: when the same mesh -> PMID relationship exists
#with the SAME property of times annotated (i.e. generated when there are multiple
#distinct disease annotations with the same MESH, it doesn't create the rel. twice...
#BUT it DOES create duplicate relationships when the "num_times_annotated property
#is unique so need to use this script to find how many duplicates would be created
# and then calculate the correct num. of relationships if everything is loaded into neo4j
#properly. Can later delete "none" MESH IDs. (Can't just delete the NULLs bc. this throws
#an error in neo4j. Perhaps another solution would be to import
#MESH and Disease separately but this is what I am doing for now since it has been 
#a huge struggle to get it working........))
PTC_relationships = (len(df.index) ) + len (dfx.index)




#Now for HZ Data:

#This is just for when uploading the HZ data by itself to a fresh df:
dfHZ = pd.read_csv('/Users/marleezinsser/Desktop/PMID-Disease-HZ.csv')

num_HZ_disease_nodes = dfHZ['Disease'].nunique()
num_HZ_PMID_nodes = dfHZ['PMID'].nunique()













#The number of nodes created in the larger kb is going to depend on how many were already in the 
#database from the PTC data
#So first going to combine the unique nodes from PTC data with Henry's nodes,
#then see how many duplicates there are.
dfHZ.drop_duplicates()

PMIDsPTC= df.iloc[:,1]
PMIDsHZ = dfHZ.iloc[:,1]

PMIDsPTC = PMIDsPTC.drop_duplicates()
PMIDsHZ = PMIDsHZ.drop_duplicates()

df=df.iloc[:,[1,3,4]]
dfHZ = dfHZ.iloc[:, [1,2,3]]

PTC_diseases = df.iloc[:,1]
HZ_diseases = dfHZ.iloc[:,1]

PTC_disease_unique = PTC_diseases.drop_duplicates()
HZ_diseases_unique = HZ_diseases.drop_duplicates()
frames = [PTC_disease_unique,HZ_diseases_unique]

result = pd.concat(frames)

result_no_dups = result.drop_duplicates()

num_repeats = (len(result.index) - len (result_no_dups.index))

num_new_HZ_Nodes = (len (HZ_diseases_unique.index) + len (PMIDsHZ)) - num_repeats

num_new_HZ_Relationships = len(dfHZ.index)


total_nodes = PTC_nodes + num_new_HZ_Nodes
total_relationships = PTC_relationships + num_new_HZ_Relationships

#total nodes = 159981
# total relationships = 961767
